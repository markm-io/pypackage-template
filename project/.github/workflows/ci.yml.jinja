name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: {% raw %}${{ github.head_ref || github.run_id }}{% endraw %}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - uses: pre-commit/action@v3.0.1

  # Make sure commit messages follow the conventional commits convention:
  # https://www.conventionalcommits.org
  commitlint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v6.0.1

{%- if enable_testing %}

  test:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.12"
          - "3.13"
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
{%- if is_django_package %}
      - uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ matrix.python-version }}{% endraw %}
      - uses: astral-sh/setup-uv@v5
      - run: uv pip install --system tox tox-uv
        shell: bash
      - run: tox -f py$(echo {% raw %}${{ matrix.python-version }}{% endraw %} | tr -d .)
        shell: bash
      - run: |
          uv run coverage combine
          uv run coverage xml
        shell: bash
{%- else %}
      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: {% raw %}${{ matrix.python-version }}{% endraw %}
      - uses: astral-sh/setup-uv@v5
      - run: uv sync --no-python-downloads
        shell: bash
{%- if enable_testing %}
      - run: uv run pytest
        shell: bash
{%- endif %}
{%- if enable_type_checking %}
      - run: uv run mypy src/
        shell: bash
{%- endif %}
{%- endif %}
{%- if enable_testing %}
      - uses: codecov/codecov-action@v5
        with:
          token: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %}
{%- endif %}
{%- endif %}

  release:
    needs:
{%- if enable_testing %}
      - test
{%- endif %}
      - lint
      - commitlint

    runs-on: ubuntu-latest
    environment: release
    concurrency: release
    permissions:
      contents: write
      id-token: write
      attestations: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: {% raw %}${{ github.sha }}{% endraw %}

      - name: Checkout commit for release
        run: |
          git checkout -B {% raw %}${{ github.ref_name }} ${{ github.sha }}{% endraw %}

      # Do a dry run of PSR
      - name: Test release
        uses: python-semantic-release/python-semantic-release@v9
        if: github.ref_name != 'main'
        with:
          root_options: --noop
          github_token: noop

      # On main branch: actual PSR + upload to PyPI & GitHub
      - name: Release
        uses: python-semantic-release/python-semantic-release@v9
        id: release
        if: github.ref_name == 'main'
        with:
          github_token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        if: steps.release.outputs.released == 'true'
        with:
          subject-path: "dist/*"

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.release.outputs.released == 'true'

      - name: Publish package distributions to GitHub Releases
        uses: python-semantic-release/publish-action@v9
        if: steps.release.outputs.released == 'true'
        with:
          github_token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          tag: {% raw %}${{ steps.release.outputs.tag }}{% endraw %}
{%- if build_docker_image %}

  build-docker:
    needs: release
    runs-on: ubuntu-latest
    if: needs.release.outputs.released == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout updated code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: {% raw %}${{ github.actor }}{% endraw %}
          password: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/{% raw %}${{ github.repository }}{% endraw %}
          tags: |
            type=semver,pattern={% raw %}{{version}}{% endraw %},value={% raw %}${{ needs.release.outputs.tag }}{% endraw %}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: {% raw %}${{ steps.meta.outputs.tags }}{% endraw %}
          labels: {% raw %}${{ steps.meta.outputs.labels }}{% endraw %}
          cache-from: type=gha
          cache-to: type=gha,mode=max
{%- endif %}
